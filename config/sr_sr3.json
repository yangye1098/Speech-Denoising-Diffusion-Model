{
    "name": "sdir_wsj0",
    "sample_rate": 8000,
    "sound_duration": 5,
    "gpu_ids": null,
    "path": { //set the path
        "log": "logs",
        "tb_logger": "tb_logger",
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": null
        // "resume_state": "experiments/sr_ffhq_210806_204158/checkpoint/I640000_E37" //pretrain model or training state
    },
    "datasets": {
        "train": {
            "name": "wsj0_si_tr",
            "dataroot": "data/data/wsj0_si_tr_0",
            "datatype": "wav", //lmdb or img, path of img files
            "snr": 0,
            "batch_size": 4,
            "num_workers": 1,
            "use_shuffle": true,
            "data_len": -1 // -1 represents all data used in train
        },
        "val": {
            "name": "wsj0_si_val",
            "dataroot": "data/data/wsj0_si_val_0",
            "datatype": "wav", //lmdb or wav
            "snr": 0,
            "batch_size": 4,
            "num_workers": 1,
            "use_shuffle": false,
            "data_len": -1 // data length in validation
        }
    },
    "model": {
        "which_model_G": "sr3", // use the ddpm or sr3 network structure
        "finetune_norm": false,
        "encoder": {
            "type": "conv",
            "conv": {
                "N": 128,
                "L": 512,
                "stride": 256
            }
        },
        "unet": {
            "in_channel": 2,
            "out_channel": 1,
            "inner_channel": 64,
            "channel_multiplier": [
                1,
                2,
                4,
                8,
                8
            ],
            "attn_res": [
                16
            ],
            "res_blocks": 2,
            "dropout": 0.2
        },
        "beta_schedule": { // use munual beta_schedule for acceleration
            "train": {
                "schedule": "linear",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            },
            "val": {
                "schedule": "linear",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            }
        },
        "diffusion": {
            "loss_type": "l1", //l1 or l2
            "channels": 1, //sample channel
            "conditional": true // unconditional generation or conditional generation(super_resolution)
        }
    },
    "train": {
        "n_iter": 240000,
        "val_freq": 10000,
        "save_checkpoint_freq": 10000,
        "print_freq": 1000,
        "optimizer": {
            "type": "adam",
            "lr": 1e-4
        },
        "ema_scheduler": { // not used now
            "step_start_ema": 5000,
            "update_ema_every": 1,
            "ema_decay": 0.9999
        }
    }
}